# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

response.title = 'Blogs chilenos en la Internet'

def index():
    return redirect(URL(r = request, f = 'respira'))
    #return str('En Mantención.')


def votar():
    return locals()

def respira():
    #redirect(URL('index'))
    from gluon.tools import prettydate
    response.files.append(URL('static', 'js/jquery.simplemodal.1.4.1.min.js'))

    try:
        catslug = request.args(0) or db.categoria[1].slug
        response.meta.description = 'Últimas publicaciones en la categoría %s' % catslug.capitalize()
        #response.meta.keywords += catslug
    except Exception,e:
        #redirect(URL(c='default',f='user'))
        response.flash = e
        catslug = ''
    response.title = "Blogosfera: %s %s" % (request.function.capitalize(), catslug.capitalize())
    """
    del response.headers['Cache-Control']
    del response.headers['Pragma']
    del response.headers['Expires']
    response.headers['Cache-Control'] = 'max-age=60'
    """
    # obteniendo el id, nombre y slug de las categorías registradas


    # obteniendo la petición de categoría desde la url, sino setea por defecto la primera conocida en db

    feed_ids = entradas = []
    box = DIV(_class = 'box')

    #entradas = DIV()
    rss = {}
    lista_fidx = []
    # obteniendo los feeds categorizados bajo el slug solicitado desde la url

    #### 1 a varias categorías por feed
    #~ for feedincat in db((db.categoria.slug == catslug) & (db.feed_categoria.categoria == db.categoria.id)
                #~ & (db.feed_categoria.feed == db.feed.id)
                #~ & (db.feed_categoria.is_active == True)
                #~ & (db.feed.is_active == True)
                #~ & (db.categoria.is_active == True)
                #~ ).select(db.feed.ALL):

    #### 1 categoría por feed
    for feedincat in db((db.categoria.slug == catslug) & (db.feed.categoria == db.categoria.id)
                #& (db.feed_categoria.feed == db.feed.id)
                #& (db.feed_categoria.is_active == True)
                & (db.feed.is_active == True)
                & (db.categoria.is_active == True)
                ).select(db.feed.ALL):

        #lista_fidx.append(feedincat.id) <- desde aquí podŕia también actualizar u2d_cat()
        feedbox = DIV(DIV(feedincat.title, _class = 'feed_titulo'), _class = 'feedbox feed_bloque  izq')

        limite = 0

        for n in db(db.noticia.feed == feedincat.id).select(db.noticia.ALL, orderby =~ db.noticia.id):
            localurl = 'http://' + request.env.http_host + URL(r = request, f = 'go', args = [catslug, n.id, n.slug])

            if n.updated != None:
                actualizado = n.updated
            else:
                actualizado = n.created_on
            
            feedbox.append(DIV(DIV(A(n.title.lower()[:66]+'..."', _name = n.slug, _href = URL(r = request, f = 'go', args = [n.slug,n.id]), _class = 'noticia_link', _target='_new'), _class = 'noticia_contenido'), DIV(prettydate(actualizado, T), _class = 'noticia_meta'), _class = 'noticia'))


            if limite == 0:
                entradas.append(dict(title =unicode(n.title,'utf8'), link = localurl, description = unicode('%s (%s)' % (n.description, n.feed.title),'utf8'), created_on = request.now))

            limite += 1
            if limite == 3:
                break

        
        box.append(feedbox)
    test='TTEESSTT'
    if request.extension == 'rss':
       rss = dict(title = request.application.upper(),
                  link = 'http://' + request.env.http_host + request.url,
                  description = unicode(response.meta.description, 'utf8'),
                  created_on = request.now,
                  entries = entradas
                  )
       contenido = rss
    else:
        
       contenido = dict(box = box,test=test)
        
    return response.render(contenido)
    #return dict(box=box)




def elimina_tildes(s):
    """
    Esta función sirve para eliminar las tildes del string que
    se le pase como parámetro.
    """
    import unicodedata
    normalizado = ''.join((c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn'))
    return str(normalizado)


def go():

    if request.extension == 'rss':
        redirect(URL(r=request,f='go',args=request.args,extension=''))
    
    slugnoticia = request.args(0) #sin uso :P
    nid = request.args(1)

    #response.meta.title=db.noticia[nid].title
    #response.meta.description = '%s %s' % (response.title,db.noticia[nid].feed.title)

    shorturl = db.noticia[nid].shorturl

    if request.env.http_referer!=None:
        referer = DIV(A(SPAN(_class = 'icon leftarrow'), 'regresar', _class = 'button pill', _style = 'margin-bottom:1em;float:left;',
                   _href = request.env.http_referer))
    else:
        referer = A(SPAN(_class = 'icon home'), 'Blogosfera.cl', _class = 'positive primary button pill', _style = 'margin-bottom:1em;float:left;',
                   _href = 'http://blogosfera.cl')
    
    
    go = DIV(referer, DIV(A(SPAN(_class = 'icon cross'), 'Cerrar el marco', _class = 'negative button pill', _style = 'margin-bottom:1em;float:right;', _href = shorturl)),
             IFRAME(_src = shorturl, _style = 'height:inherit;width:inherit;border:0;'), _id = 'godiv', _style = 'display:block;height:100%;width:100%;')

    return dict(go=go)


#@auth.requires(request.cid)
def buscar():
    #from html2text import *
    #from gluon.html import markmin_serializer
    response.title = 'Busca en Blogosfera.cl'
    #response.files.append(URL('static','css/smartpaginator.css'))
    #response.files.append(URL('static','js/smartpaginator.js'))
    import nltk.util
    
    form = FORM('Buscar', INPUT(_name='buscando', requires=IS_LENGTH(minsize=6,error_message='intenta especificar más tu búsqueda, por favor')),INPUT(_type='submit'))
    lista_resultados = ''
    if form.accepts(request.post_vars):
        
        buscado = XML(form.vars.buscando)
        buscado = buscado.split()
        try:
            for patron in buscado:
                resultados = db((db.noticia.title.contains(patron)) | (db.noticia.description.contains(patron))).select(db.noticia.id,db.noticia.title, db.noticia.created_on, db.noticia.description, db.noticia.slug,db.noticia.feed, orderby=~db.noticia.id)
                
            lista_resultados = DIV(_id='search_results')
            for n,resultado in enumerate(resultados):
                n=n+1

                title = A(resultado.title+':',_href=URL(f='go',args=[resultado.slug,resultado.id]),_class='title',_target='new',_style='background:#fff;color:#000;')
                #body = html2text(elimina_tildes(unicode(str(DIV(XML(resultado.description[:200]+'...',sanitize=True,permitted_tags=['strong','br','p','br/','b','a','font','ul','ol','i','li','h1','h2','h3','h4','em']),_class='description')),'utf-8')))
                body = DIV(nltk.util.clean_html(XML(resultado.description))+'(...)',_class='description')
                meta = DIV('desde '+resultado.feed.title+' el '+str(resultado.created_on),_class='meta')
                
                lista_resultados.append(DIV(SPAN(str(n)+' '),title,meta,body,_class='search_result'))
            
            paginador = """
                        <script>
                        $(document).ready(function(){
                        $('#paginador').smartpaginator({ totalrecords: %s,
                                                                recordsperpage: 1,
                                                                datacontainer: 'search_results', 
                                                                dataelement: 'div',
                                                                theme: 'black',
                                                                next: 'siguiente',
                                                                prev: 'anterior',
                                                                first: 'primera',
                                                                last: 'última' });
                        });
                        </script>""" % n
            lista_resultados.append(XML(paginador))
            response.flash = str(n)+' resultado(s)'
            
        except Exception,e:
            #response.flash = e
            response.flash = 'No encontré noticias con esas palabras. Intente en otro momento. '
            lista_resultados = 'Ø'
    return dict(form=form,lista_resultados=lista_resultados)


@auth.requires(request.cid)
def misfeeds():
    fdata = db(db.feed.created_by == auth.user_id).select(db.feed.id,db.feed.title,db.feed.categoria,db.feed.is_active)
    ftable = TABLE(THEAD(TR(TH('Título'),TH('Categoría'),TH('Activado'))))
    for f in fdata:
        ftable.append(TR(TD(f.title),TD(f.categoria.title),TD(f.is_active),TH(A(SPAN(_class='icon pen'),'Editar',_href=URL(c='default',f='editarFeed.load',args=[f.id]),_class='negative button',cid='editmyfeed'))))
        
    return dict(ftable=ftable)

@auth.requires(request.cid)
def editarFeed():
    form = ''            
    if request.args(0):
        if db.feed[int(request.args(0))].created_by == auth.user_id:
            form = SQLFORM(db.feed,request.args(0),deletable=True)
            if form.accepts(request.vars,session):
                response.flash = 'El Feed ha sido editado exitosamente'
            
        else:
            response.flash = 'El feed que referencias no es válido'
    return dict(form=form)

def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form = auth())

def sitemap():

    sm = [str('<?xml version="1.0" encoding="UTF-8" ?> <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')]
    prefix = request.env.wsgi_url_scheme+'://'+request.env.http_host
    for cat in db(db.categoria.id>0).select(db.categoria.slug):
        sm.append(str(TAG.url(
            TAG.loc(prefix,URL(r=request,c='default',f='respira.',args=[cat.slug])),
            #TAG.lastmod(request.now),
            TAG.changefreq('always')
            )))

    sm.append('</urlset>')
    return sm
